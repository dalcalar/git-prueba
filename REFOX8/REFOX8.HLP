           ~R  ~E  ~F  ~O  ~X     ~8 ~. ~0

~REFOX ~8.x ~for ~Visual ~FoxPro, ~FoxPro ~2.x ~and ~FoxBASE+
========================================================
      (c) 1998 Xitech (Europe), ComPro
========================================================

~ReFox ~Help ~(F1)
===============
Pressing the F7 key will allow for keywords to be
searched for within this help text. Also PgUp/PgDn.


~Use ~of ~ReFox
============
ReFox can be invoked as a command line utility 
from the DOS prompt, or RUN from the Windows menu, 
with suitable (optional) parameters. It will also
perform as an interactive program for multiple
functions.

ReFox has two main purposes :

1) Splitting and Decompiling source code components
2) Branding applications

ReFox also allows viewing, searching, editing of
databases and code, as well as comparison of
compiled modules.


~OPERATION
=========
Once loaded ReFox will remain on the Title screen 
until a key is pressed.  ReFox can be started with 
the -T option to avoid this initial Title screen on
loading.

In the main ReFox screen, a file dialog is presented. 
Move the cursor keys (or mouse click) to position the
file selector.  Move up and down directories by 
selecting the '..' option or subdirectories, shown in
as uppercase.  

The F4 Tree option allows drive selection, directory
selection and creation of new directories. Directories 
preceded with a + indicate further subdirectories.
Pressing Escape will exit from the Tree mode for
selecting the directory. Pressing Insert while in the
Tree mode will prompt for the creation of a new
directory at the current position in the tree
structure.  This is useful when an APP is split,
directing the output to a fresh diirectory.

To view the contents of a file, press Enter or space
(or double-click with the mouse).

Press Ctrl key in the main screen to see options to
sort and change the main file display.

A quickview option can be toggled on or off by
CTRL-Q while in the files dialog.  As you move up
and down through the files the extra window will
show the contents (decompiled if relevant) of
this file immediately.  For multiple component
APP or EXE files the 'main' program will be shown.

Press Del key to delete a marked file, confirm with
Ctrl-Enter.

~SPEED ~RECOVERY ~FROM ~.EXE ~OR ~.APP
================================
(COMPLETE SPLIT AND DECOMPILATION)
This process will split an Application into
component files and then further decompile object
code into original source, including Methods fields
in VFP SCX and VCX files.  Also a log filename
.LFN is produced showing files and long filename
equivalents as originally stored in the code.

1. Load ReFox, (REFOX8 -T).
2. Select the APP or EXE file(s) by pressing 'Insert'
    (press Insert again to deselect)
3. Choose F7 Split option and select destination for
    components and decompiled files.
4. Exit ReFox.

A useful program BUILDPJX.PRG is supplied for a quick
method to construct a project for the recovered source
code instead of interactively via the project manager.
With applications consisting of many periphery files
such as .ICO and .BMP rebuilding the project can
sometimes be tedious if they are not referenced
directly in the application.  Pass the .LFN log file
generated by ReFox to the BUILDPJX.PRG program and a
project (.PJX) of the same name will be built including
all the components in the file.
        eg   = BUILDPJX('C:\MYAPP\MYAPP.LFN')
             will produce a project MYAPP.PJX

~FILE ~TYPES
==========
EXE or APP
Viewing these files will display a list of the 
component files (FXP,BMP,VCX,VCT etc).  

This list can be sorted by pressing the CTRL key 
and then the required function key as displayed 
on the bottom of the screen.  For example, CTRL-F4 
will sort by file extension.  This facility is 
also available on the initial file list.

As well as sorting CTRL-F8 will filter out components
without compiled code, showing only FXP,SPX,MPX,QPX,
VCX,SCX.

The contents of any component files can be viewed
by further selection. 

~VIEWING, ~EXTRACTING and ~EDITING ~FILES
1. Compiled files
   Viewing compiled files (FXP,SPX,MPX,FOX,QPX) will 
   display the source code.  When the source code is
   being viewed, pressing F2 Info will list all the
   procedures and functions in the code and if
   selected the cursor will be positioned on this
   part of the code.
2. DBF file structures
   FoxPro components structured as database files
   (DBF,FRX,VCX,SCX,LBX,DBC) will be shown in a either
   a Browse or Record mode.  The view can be toggled
   by pressing the F3 key.  The initial type of 
   display is determined by the VU setting in the
   REFOX8.INI file.  The F7 Goto key allows jumping
   to a required record if required.
3. Graphical compionents (Bitmaps,Icons,Cursors,Masks)
   Graphical files can be viewed as pictures or
   as binary data.  See the General section in the
   Options dialog for Bitmap view to either Visual 
   or Data setting.
4. Other file types
   Viewing other file types (TXT,BIN,etc) will simply
   display the contents of the file.  Pressing the 
   F4 key will toggle between Normal and Hex type
   display. With FoxPro index files (CDX,IDX) press
   F2 Info to display the index expressions, and if
   the information is needed for reference press
   F5 Save to put the details into a .__X file of
   the same name.

To EXTRACT a specific file without resorting to a
complete split and decompile, use the F3 Extract
option while positioned on a component within
an application.

To directly EDIT a file (eg an embedded FPT
or TXT file for example, view the file, go into
F4 Hex view and then press ALT+F4.  The message
"EDIT pos" should be seen in the top right and
TABbing will flick between LHS hex edit and RHS
Ascii edit. Caution - this writes directly to
code without confirmation!

Files can be searched for certain contents by using
the F7 Search option.  Type in the required string 
and press Enter. For repeated searching, press the
F7 key and Enter again. The F2 Info key displays
more detailed information about a file.  This option
also displays the entire filename of a long file,
not just the first six and the ~1, for example.


Recovery from compiled modules. 
(FXP,FOX,SPX,QPX,MPX)
1. Select the required file, stand alone or bound 
   within an APP or EXE.
2. View the contents of the file by pressing Enter
   or double-clicking with the mouse.
3. Press F5 Save. A dialog requesting where the file
   should be decompiled is shown.  Enter the new file
   name if required.  If the extension is set as a 
   .* the file will be saved as a .REF.  Returning
   to the first file menu, the file entries can be 
   refreshed by CTRL-R, if you wish to immediately
   view the file.  Pressing Ctrl-Enter will toggle
   between the target directory (as specified in the
   REFOX8.INI file) and the file's directory.

Recovery of Single Procedure from module.
1. As above steps, but press F2 info to display
   procedures, select and then press F5 Save.

Recovery of Code/Code snippets from Visual Classes 
(free standing VCX or SCX)
In some cases the METHODS field may already be 
populated (if it was not removed before building or
if the standard F7 Split option was used).
1. Select the required file.
2. View the contents of the file by pressing Enter
   or double-clicking with the mouse.
3. Ensure that view is in Record mode (F3 toggle).
4. Press F5 Decomp. Code is extracted from the 
   OBJCODE field and placed in the METHODS field 
   for all records.  If you wish to extract only
   single records, press CTRL-F5 instead.
5. In FoxPro issue the command
   COMPILE FORM <formname> for each recovered item.
   This updates the OBJCODE with correct source
   references.  Failure to do this will result in
   a spurious view of User Procedures.

Recovery of Procedure Code from database DBC.
Record 4, field CODE of the DBC holds the object
code, while record 3 holds the source code.
1. Select the required DBC file.
2. View the contents of the file by pressing Enter
   or double-clicking with the mouse.
3. Ensure that view is in Record mode (F3 toggle).
4. Press ALT+F5. Code is decompiled from the 
   record 4 and source code is placed in record 3 
5. In FoxPro issue the command
   COMPILE DATABASE <databasename> to update. 

~BRANDING
========
Branding provides a mechanism for protecting FoxPro 2.x
and Visual FoxPro APP's from decompilation.  Embedded
PLB's in DOS applications are not exposed. 

Visual FoxPro VCX's are not exposed from Branded 
Applications.

Standalone VCX's cannot be branded, but in VFP 5.0/6.0,
they could be embedded into a holding .APP or .EXE and
then branded.  They can be referenced in the code via :
  SET CLASSLIB TO <class> IN <EXEname>Ý<APPname>

There are three levels of branding.  Branding level is
switched in the last group in the Options screen.
Also in the Options screen, while positioned on the
Protection Level option, pressing Ctrl-Enter will
bring up the TimeStamp value relevant for Levell II 
branding.  A "?" means the current value will be 
left unmodified, any other character will be written 
to the ESL/DLL in that position.  This feature allows 
programmers to optionally use the VERSION(1) function 
and pick up the change they have made in the timestamp 
if they want to reflect the fact they are running with 
a branded level II file.

~LEVEL ~I
Level I requires the addition of code assignments in
all source files in need of protection.  

The code addition is :

_REFOX_ = (9876543210)
_REFOX_ = (9876543210)

To avoid runtime interference, this line can be
stopped from execution by wrapping with a
IF .F. / ENDIF combination.

ReFox can add these lines to source code for you. In
the main screen, select the required source files,
then press ALT-F6.  A prompt for a different
directory to copy the files will be given and then
the files will be modified. A backup of the file
starting with a tilda will be made.

Alternatively code can be modified by the programmer.
The assignment should be added as close to the top of
each source file as possible (but after Parameter
statements).  The program ADDREFOX.PRG is also useful
for adding the variable assignment to specified
source files aswell as Menu/Screen MNX/SCX files.

The Application must then be compiled as
encrypted from within FoxPro.

The .EXE or .APP is then marked in ReFox and 
branded with a specified password (Protection set
at Level I in options).

This level of branding allows decompiling of the
Application with the correct password.  

~LEVEL ~I+
Level I+ allows protection of code components 
without the need for code changes or the need
for changes to the runtime files. The ReFox version
that branded the code will be the only version that
will be able to reverse the code by supplying the 
password.

The file sizes of Level I+ branded files will be 
increased by a small amount.

~LEVEL ~II
Level II protection requires branding of all 
distributed compiled components of an Application, 
as well as the FoxPro .ESL file (.DLL for VFP 5 & 6).
These programs should be compiled as ENCRYPTED.
This approach requires the files to be marked and
then Branded with ReFox, with Protection Level II
set in the options).  A password is specified when
branding although you cannot use it to recover from
a level II branded APP. For FoxPro DOS the .ESO file
also requires marking.  Branding may take some time
on large EXE and APP files.

Level II branding is irreversible by ReFox.

Care should be taken when distributing APPs of
this nature, as they will only run with the
associated ESL/DLL file.  Running two separate APPs,
one branded Level II and one normal unbranded:
they cannot share the same ESL/DLL file.
CAUTION: This may impact on already installed
Fox Applications. See the file LEVELII.TXT for
latest information on this feature.
Normal COMPILEd (unencrypted) code will still
run with branded Runtime files. 
Visual FoxPro 5.0 and 6.0 users can use the -D
startup switch to specify a runtime file. 


~RUNTIME ~FILES (Visual FoxPro)
~=============
VFP300.ESL      Visual FoxPro 3.0
VFP500.DLL      Visual FoxPro 5.0
VFP6R.DLL       Visual FoxPro 6.0


~DECOMPILING ~BRANDED ~FILES (Not Level II)
=========================
The same procedure should be followed as with
a 'normal' decompile, with the exception that a
dialog will appear requesting the original
password used for branding.  Correctly supplying
this will allow the process to continue, otherwise
the decompile will be terminated.


~LONG FILE NAMES
===============
Under Windows 95 long filenames are supported.
Under Windows NT, ReFox creates a .BAT batch 
file the same name as the Application APP or EXE
when splitting and decompiling.  If this is run 
after exiting ReFox (type the <APPname?>.BAT in the 
DOS Window) this will rename the shortened 
filenames to their original long name form.

~REFOX8.INI
==========
Sample contents :

OP=10000000
SY=00000000
CA=00000
TR=00000
ST=000000
BK=~
PL=1
FA=0
FD=0
VU=1
SB=0
TS=[????????????????????]
IP=C:\VFP\
OP=C:\REFOX\RECOVER
MF=
TX=

OP - Operators  
SY - Synonyms
CA - Case
TR - Trim
ST - Directory and Application Sort/Filter options
BK - Backup file prefix, if blank no backup is made.
PL - Branding Protection Level (1 Level I, 2 Level II)
FA - Fade control
FD - Fade screen option (0 Off, 1 On)
VU - default view DBF files (0 Browse, 1 Record)
SB - screen blanking in minutes (0 off)
TS - used in changing TimeStamp in a level II branded ESL
IP - default location of files to decompile/brand
OP - default location to decompile into
MF - specification of extensions for search options
TX - to line display text on exit


~COMPARISON ~OF ~COMPILED ~CODE
===========================
This feature is useful when checking the
similarity of existing compiled code with
newly compiled recovered source, allowing the
user to check that recovery has been successful.

Pressing the key ALT-F8 (or F8 only for token
output) will prompt the user for a directory
where an identically named file should reside.

ReFox will process both files, reporting on
procedures and line lengths. Any differences will
be highlighted, and saved to a similarly named
file with last character of extension replaced
with '!'.


~COMMAND ~LINE ~SWITCHES
=====================
To list the command line switches of ReFox type:

REFOX8 -?


~MPR>MNX ~and ~SPR>SCX ~conversion
==============================
Also supplied with ReFox is a FoxPro application
suitable for converting generated menu source
(MPR) into menu builder format (MNX).  Also FoxPro
2.x SPR code into Screen Builder format (SCX).  The
latter conversion process does not cater for
multiple screen sets and will not convert into
the exact original format.

The appropriate FoxPro XPRGENnn.APP should be run.
(where nn is 50 for VFP 5.0/6.0 or  30 for VFP 3.0,
25 for FoxPro 2.5 or 2.6 or 20 for FoxPro 2.0).
                      
DO XPRGENxx [[WITH] [".MPR"] [".SPR"]]

e.g.
DO XPRGEN50 WITH ".MPR"


~COSMETIC ~CODE ~DIFFERENCES
=========================
a. Comments are not stored in compiled source code.
   They are therefore not recovered by decompilation.
   However, if you use
       = "* My Comments"
   instead of
       * My Comments
   the text will be stored because it is an expression.
b. Leading 0's of numeric constants are omitted.
c. Compound constants are evaluated at compile time.
   So m.nvar = 1 + 7 + 12 is decompiled as m.nvar = 20.
d. The DECLARE DLL Command :
     DECLARE [fntype] fnname IN libname ;
        [[paramtype] [@] [paramname],..]
   does not need/use/store the parameter information
   in the code, so it is not recoverable by ReFox.


~XITECH ~(EUROPE)
===============
xitech@compuserve.com
http://www.xitech-europe.co.uk

Tel : +44 (0)1707 276637
Fax : +44 (0)1707 267777


~FREQUENTLY ~ASKED ~QUESTIONS
==========================

Q. I get "Fox Version Mismatch" when branding level II
A. Ensure you have selected BOTH the APP/EXE and the 
   relevant runtime file (DLL/ESL).  If you try and 
   brand the runtime files by themself this is the 
   error that is given.

Q. I get "Object file is compiled in a previous version"
   after running my branded level II application.
A. The APP or EXE has been branded but it is not running
   with the associated branded runtime file or vice versa.
   See LEVELII.TXT

Q. My snippet code in a recovered VFP class/form seems
   to be messed up when I view them in FoxPro.
A. Issue a COMPILE FORM in FoxPro before editing.




